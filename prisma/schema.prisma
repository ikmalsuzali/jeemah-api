datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Address {
  id         String   @id @default(cuid())
  address    String
  postcode   String?
  city_id    String
  city       City     @relation(fields: [city_id], references: [id])
  longitude  Float?
  latitude   Float?
  project_id String?  @unique
  project    Project? @relation(fields: [project_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  user       User?
  company    Company?

}

model AdminProject {
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  project_id String
  project    Project  @relation(fields: [project_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?

  @@id([user_id, project_id])
}

model City {
  id         String    @id @default(cuid())
  name       String
  state_id   String?
  state      State?    @relation(fields: [state_id], references: [id])
  country_id String?
  country    Country?  @relation(fields: [country_id], references: [id])
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  created_by String?
  updated_by String?
  addresses  Address[]
}

model Country {
  id         String   @id @default(cuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  cities     City[]
  states     State[]
}

model Company {
  id              String   @id @default(cuid())
  name            String
  registration_no String?
  phone_number    String?
  email           String
  description     String?
  address_id      String?  @unique
  address         Address? @relation(fields: [address_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  created_by      String?
  updated_by      String?
}

model PostCategory {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String?
  fallback_image String?
  project_id     String?
  project        Project? @relation(fields: [project_id], references: [id])
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  created_by     String?
  updated_by     String?
  posts          Post[]
}

model Post {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  post_base_category PostBaseCategory
  post_view_type     ViewType         @default(PUBLIC)
  post_category_id   String?
  post_category      PostCategory?    @relation(fields: [post_category_id], references: [id])
  booking_id         String?
  booking            Booking?         @relation(fields: [booking_id], references: [id])
  start_date         DateTime?
  end_date           DateTime?
  project            Project          @relation(fields: [project_id], references: [id])
  project_id         String
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  created_by         String?
  created_by_user    User?            @relation(fields: [created_by], references: [id])
  updated_by         String?
  post_images        Attachment[]     @relation("post_image")
  post_attachments   Attachment[]     @relation("post_attachment")
}

model UserBookingAttendence {
  id         String   @id @default(cuid())
  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
  booking_id String
  booking    Booking  @relation(fields: [booking_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
}

model Project {
  id                     String                   @id @default(cuid())
  name                   String
  registration_no        String?
  phone_number           String?
  email                  String
  description            String?
  currency_id            String?
  project_logo           Attachment?              @relation("project_logo")
  project_images         Attachment[]             @relation("project_image")
  currency               Currency?                @relation(fields: [currency_id], references: [id])
  financial_detail_id    String?                  @unique
  financial_detail       ProjectFinancialDetail?  @relation(fields: [financial_detail_id], references: [id])
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  created_by             String?
  updated_by             String?
  posts                  Post[]
  user_project_followers UserProjectFollower[]
  admin_projects         AdminProject[]
  bookings               Booking[]
  events                 Event[]
  admin_project_position OrganizationChartAdmin[]
  event_rate             EventRate[]
  address                Address?
  post_categories        PostCategory[]
}

model Payment {
  id              String         @id @default(cuid())
  reference_no    String
  user_id         String?
  user            User?          @relation(fields: [user_id], references: [id])
  // name String?
  // email String?
  // phone_number String?
  response_status Int?
  payment_method  PaymentMethod?
  payment_status  PaymentStatus  @default(PENDING)
  project_id      String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  created_by      String?
  updated_by      String?
  receipt         Receipt?
  payment_items   PaymentItem[]

}

model PaymentItem {
  id         String   @id @default(cuid())
  payment_id String
  payment    Payment  @relation(fields: [payment_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?

}

model ProjectFinancialDetail {
  id           String   @id @default(cuid())
  bank_account String?
  ipay88_code  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  created_by   String?
  updated_by   String?
  project      Project?
}

model State {
  id         String   @id @default(cuid())
  name       String
  country_id String?
  country    Country? @relation(fields: [country_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
  cities     City[]
}

model UserProjectFollower {
  user_id           String
  user              User             @relation(fields: [user_id], references: [id])
  project_id        String
  project           Project          @relation(fields: [project_id], references: [id])
  acceptance_status AcceptanceStatus @default(CONFIRMED)
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt
  created_by        String?
  updated_by        String?

  @@id([user_id, project_id])
}

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  password                  String
  first_name                String?
  last_name                 String?
  phone_number              String
  status                    UserStatus?              @default(ACTIVE)
  address_id                String?                  @unique
  address                   Address?                 @relation(fields: [address_id], references: [id])
  role                      Role
  created_at                DateTime                 @default(now())
  updated_at                DateTime                 @updatedAt
  created_by                String?
  updated_by                String?
  posts                     Post[]
  user_projects             UserProjectFollower[]
  admin_projects            AdminProject[]
  user_booking_attendences  UserBookingAttendence[]
  organization_chart_admins OrganizationChartAdmin[]
  payments                  Payment[]
}

model UserInvite {
  id         String   @id @default(cuid())
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
}

model Booking {
  id                       String                  @id @default(cuid())
  name                     String
  reference_no             String?                 @unique
  description              String?
  cancelled_description    String?
  start_datetime           DateTime
  duration_minute          Int
  discount                 Int                     @default(0)
  all_day                  Boolean                 @default(false)
  main_booking_id          String?
  booking_status           BookingStatus           @default(OPEN)
  event_id                 String?
  event                    Event?                  @relation(fields: [event_id], references: [id])
  booking_view_type        ViewType                @default(PUBLIC)
  payment_type             PaymentType             @default(NONE)
  info_color               String?
  max_attendees            Int?
  project_id               String
  project                  Project                 @relation(fields: [project_id], references: [id])
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  created_by               String?
  updated_by               String?
  booking_images           Attachment[]            @relation("booking_image")
  booking_attachments      Attachment[]            @relation("booking_attachment")
  user_booking_attendences UserBookingAttendence[]
  posts                    Post[]
}

// model BookedEvent {
//   id         String   @id @default(cuid())
//   project_id String
//   project    Project  @relation(fields: [project_id], references: [id])
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   created_by String?
//   updated_by String?
// }

model Event {
  id              String     @id @default(cuid())
  name            String
  description     String?
  minute_duration Int        @default(30)
  event_rate_id   String?    @unique
  event_rate      EventRate? @relation(fields: [event_rate_id], references: [id])
  project_id      String
  project         Project    @relation(fields: [project_id], references: [id])
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  created_by      String?
  updated_by      String?
  bookings        Booking[]
}

model OrganizationChartAdmin {
  id                       String                 @id @default(cuid())
  order                    Int
  name                     String
  user_id                  String?
  user                     User?                  @relation(fields: [user_id], references: [id])
  organization_person_type OrganizationPersonType @default(COMMITTEE_MEMBER)
  project_id               String
  project                  Project                @relation(fields: [project_id], references: [id])
  created_at               DateTime               @default(now())
  updated_at               DateTime               @updatedAt
  created_by               String?
  updated_by               String?

}

model EventRate {
  id              String        @id @default(cuid())
  name            String
  description     String?
  rate_amount     Int
  events          Event[]
  event_rate_type EventRateType
  project_id      String
  project         Project       @relation(fields: [project_id], references: [id])
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  created_by      String?
  updated_by      String?
}

model Currency {
  id         String    @id @default(cuid())
  name       String
  code       String
  symbol     String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  created_by String?
  updated_by String?
  project    Project[]
}

model Receipt {
  id           String   @id @default(cuid())
  reference_no String?
  user_id      String
  payment_id   String?  @unique
  payment      Payment? @relation(fields: [payment_id], references: [id])
  project_id   String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  created_by   String?
  updated_by   String?
}

model Attachment {
  id                    String   @id @default(cuid())
  originalName          String
  filename              String
  post_attachment_id    String?
  post_attachment       Post?    @relation("post_attachment", fields: [post_attachment_id], references: [id])
  post_image_id         String?
  post_image            Post?    @relation("post_image", fields: [post_image_id], references: [id])
  project_logo_id       String?  @unique
  project_logo          Project? @relation("project_logo", fields: [project_logo_id], references: [id])
  project_image_id      String?
  project_image         Project? @relation("project_image", fields: [project_image_id], references: [id])
  booking_image_id      String?
  booking_image         Booking? @relation("booking_image", fields: [booking_image_id], references: [id])
  booking_attachment_id String?
  booking_attachment    Booking? @relation("booking_attachment", fields: [booking_attachment_id], references: [id])
  user_id               String?
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
  created_by            String?
  updated_by            String?
}

model Invoice {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by String?
  updated_by String?
}

enum PaymentType {
  NONE
  DONATION
  SERVICE
}

enum PaymentStatus {
  CANCELLED
  PENDING
  SUCCESS
  FAILED
}

enum PaymentMethod {
  CASH
  IPAY88
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum PostBaseCategory {
  EVENT
  USEFUL_CONTACT_NO
  LINKS
}

enum ViewType {
  FOLLOWERS_PUBLIC
  FOLLOWERS_PRIVATE
  INTERNAL_PUBLIC
  INTERNAL_PRIVATE
  PUBLIC
}

enum BookingStatus {
  OPEN
  BOOKED
  CANCELLED
}

enum EventRateType {
  DAILY_PER_USER
  ONE_OFF_PER_USER
  ONE_OFF_PER_EVENT
}

enum EventType {
  PUBLIC
  PRIVATE
  INTERNAL
}

enum AcceptanceStatus {
  CONFIRMED
  PENDING
  DECLINED
}

enum OrganizationPersonType {
  CHAIRMAN
  VICE_CHAIRMAN
  TREASURER
  SECRETARY
  COMMITTEE_MEMBER
}

enum BookingRepeatType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum BookingDays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AttachmentType {
  IMAGE
  FILE
}
